@using CashFlowManagement.Utilities
@model List<CashFlowManagement.EntityModel.StockCodes>

@{
    double buyTransactionFee = 0.15 / 100,
           saleTransactionFee = 0.15 / 100,
           taxTransactionFee = 0.1 / 100,
           totalNumberOfShares = 0,
           totalSpotRice = 0,
           totalAveragePrice = 0,
           totalBrokerFee = 0,
           totalValue = 0,
           totalExpectedDiviend = 0,
           totalMortgageValue = 0,
           totalAnnualExpense = 0,
           totalMonthlyExpense = 0;
}

<table class="table table-bordered table-striped stock-table">
    <thead>
        <tr>
            <th class="text-center">Stock Code</th>
            <th class="text-center">Trade day</th>
            <th class="text-center">Transaction</th>
            <th class="text-center">Number of shares</th>
            <th class="text-center">Spot rice</th>
            <th class="text-center">Average price</th>
            <th class="text-center">Broker free</th>
            <th class="text-center">Value</th>
            <th class="text-center">Expected dividend</th>
            <th class="text-center">Mortgage value</th>
            <th class="text-center">Expense interest</th>
            <th class="text-center">Total annual expense</th>
            <th class="text-center">Monthly Expense</th>
            <th class="text-center">Note</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Count > 0)
        {
            foreach (var item in Model)
            {
                <tr>
                    <td class="hidden">
                        <span class="stock-code">@item.StockCode</span>
                    </td>
                    <td class="text-center" rowspan="@(item.StockTransactions != null && item.StockTransactions.Count > 0 ? item.StockTransactions.Count + 1 : 1)" style="vertical-align: middle">
                        @item.StockCode <br />
                        <button type="button" class="btn btn-primary create-new-transaction" data-stock-id="@item.Id">Add Transaction</button> <br />
                        <button type="button" class="btn btn-success update-stock" data-stock-id="@item.Id">Update Stock</button> <br />
                        <button type="button" class="btn btn-danger delete-stock" data-stock-id="@item.Id">Delete Stock</button> <br />
                    </td>
                    @if (item.StockTransactions == null || item.StockTransactions.Count == 0)
                    {
                        <td class="text-center" colspan="14">No stock transaction available</td>
                    }
                </tr>
                if (item.StockTransactions != null && item.StockTransactions.Count > 0)
                {
                    foreach (var transaction in item.StockTransactions)
                    {
                        <tr>
                            <td>
                                @if (transaction.TransactionType == 1)
                            {
                                    @Html.Raw("Buy")
                                }
                                else if (transaction.TransactionType == 2)
                                {
                                    @Html.Raw("Sale")
                                }
                                else if (transaction.TransactionType == 3)
                                {
                                    @Html.Raw("Dividend")
                                }
                            </td>
                            <td>@transaction.TradeDay</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.NumberOfShares)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.SpotPrice)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber((transaction.NumberOfShares * transaction.SpotPrice * transaction.TransactionType == 1 ? 1 + buyTransactionFee : transaction.TransactionType == 2 ? 1 - saleTransactionFee : 0) / transaction.NumberOfShares)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.NumberOfShares * transaction.SpotPrice * transaction.TransactionType == 1 ? buyTransactionFee : transaction.TransactionType == 2 ? saleTransactionFee : 0)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.NumberOfShares * transaction.SpotPrice * transaction.TransactionType == 1 ? 1 + buyTransactionFee : transaction.TransactionType == 2 ? 1 - saleTransactionFee : 0)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.ExpectedDiviend)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.MortgageValue)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.ExpenseInterest)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.ExpenseInterest * transaction.MortgageValue / 100)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.ExpenseInterest * transaction.MortgageValue / 1200)</td>
                            <td>@transaction.Note</td>
                            <td class="text-center" width="200" style="vertical-align: middle">
                                <button class="btn btn-success update-transaction" data-transaction-id="@transaction.Id">Update</button>
                                <button class="btn btn-danger delete-transaction" data-transaction-id="@transaction.Id">Delete</button>
                            </td>
                            @{
                                totalNumberOfShares += transaction.TransactionType == 1 ? transaction.NumberOfShares : transaction.TransactionType == 2 ? transaction.NumberOfShares * (-1) : 0;
                                totalSpotRice = transaction.SpotPrice;
                                totalAveragePrice = (transaction.NumberOfShares * transaction.SpotPrice * transaction.TransactionType == 1 ? 1 + buyTransactionFee : transaction.TransactionType == 2 ? 1 - saleTransactionFee : 0) / transaction.NumberOfShares;
                                totalValue += transaction.NumberOfShares * transaction.SpotPrice * transaction.TransactionType == 1 ? 1 + buyTransactionFee : transaction.TransactionType == 2 ? 1 - saleTransactionFee : 0;
                                totalBrokerFee = totalValue * (1 - saleTransactionFee + taxTransactionFee);
                                totalExpectedDiviend = transaction.ExpectedDiviend;
                                totalMortgageValue += transaction.MortgageValue;
                                totalAnnualExpense += transaction.ExpenseInterest * transaction.MortgageValue / 100;
                                totalMonthlyExpense = totalAnnualExpense / 12;
                            }
                        </tr>
                                }
                                <tr>
                                    <td class="text-center"><strong>Total value</strong></td>
                                    <td></td>
                                    <td></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalNumberOfShares)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalSpotRice)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalAveragePrice)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalBrokerFee)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalValue)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalExpectedDiviend)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalMortgageValue)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalAnnualExpense / totalMortgageValue)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalAnnualExpense)</strong></td>
                                    <td><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(totalAnnualExpense / 12)</strong></td>
                                    <td colspan="2"></td>
                                </tr>
                                        }
                                        else
                                        {
                                        }
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td class="text-center" colspan="15">No stock income available</td>
                                    </tr>
                                }
    </tbody>
</table>
