@model CashFlowManagement.ViewModels.AssetListViewModel
@using CashFlowManagement.Utilities
@using CashFlowManagement.EntityModel
@using CashFlowManagement.Constants
@using CashFlowManagement.ViewModels
@{
    ViewBag.Title = "Report";
    Layout = "";
}

<div class="background">
    <div class="text-right">
        @*<button type="button" class="btn btn-default btn-compact-view" data-asset-type="@Model.Type">
                <span class="glyphicon glyphicon-th-large"></span>
            </button>
            <button type="button" class="btn btn-default btn-detail-view" data-asset-type="@Model.Type">
                <span class="glyphicon glyphicon-th"></span>
            </button>*@
    </div>
    <div class="asset-table">
        <table class="table table-bordered table-condensed table-responsive">
            <thead>
                <tr>
                    @if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                    {
                        <th>Tài khoản tiết kiệm</th>
                        <th>Ngày gửi</th>
                        <th>Ngày đáo hạn</th>
                        <th>Thu nhập tháng</th>
                        <th>Thu nhập năm</th>
                        <th>Tổng vốn</th>
                        <th>Lãi suất tiền gửi</th>
                        <th>Kiểu nhận lãi</th>
                        <th>Kỳ hạn</th>
                        <th>Ghi chú</th>
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE)
                    {
                        <th class="text-center">Bất động sản</th>
                        <th class="text-center">Thu hàng tháng</th>
                        <th class="text-center">Thu hàng năm</th>
                        <th class="text-center">Giá trị tài sản</th>
                        <th class="text-center">Tỷ suất lợi nhuận cho thuê</th>
                        <th class="text-center">Giá trị tiền vay</th>
                        <th class="text-center">Chi phí lãi vay</th>
                        <th class="text-center">Phải trả hàng tháng</th>
                        <th class="text-center">Phải trả hàng năm</th>
                        <th class="text-center">Số tiền gốc còn phải trả</th>
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.BUSINESS)
                    {
                        <th class="text-center">Kinh doanh</th>
                        <th class="text-center">Thu hàng tháng</th>
                        <th class="text-center">Thu hàng năm</th>
                        <th class="text-center">Giá trị góp vốn</th>
                        <th class="text-center">Tỷ suất lợi nhuận</th>
                        <th class="text-center">Giá trị tiền vay</th>
                        <th class="text-center">Chi phí lãi vay</th>
                        <th class="text-center">Phải trả hàng tháng</th>
                        <th class="text-center">Phải trả hàng năm</th>
                        <th class="text-center">Số tiền gốc còn phải trả</th>
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.OTHERS)
                    {
                        <th class="text-center">Tài sản khác</th>
                        <th class="text-center">Thu nhập hàng tháng</th>
                        <th class="text-center">Thu nhập hàng năm</th>
                        <th class="text-center">Tổng giá trị</th>
                        <th class="text-center">Tỷ suất sinh lời</th>
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.INSURANCE)
                    {
                        <th class="text-center">Bảo hiểm nhân thọ</th>
                        <th class="text-center">Tổng giá trị thụ hưởng</th>
                        <th class="text-center">Tổng phải đóng</th>
                        <th class="text-center">Từ ngày</th>
                        <th class="text-center">Đến ngày</th>
                        <th class="text-center">Tổng số tháng</th>
                        <th class="text-center">Phải đóng hàng tháng</th>
                        <th class="text-center">Phải đóng hàng năm</th>
                        <th class="text-center">Còn phải đóng</th>
                        <th>Ghi chú</th>
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.STOCK)
                    {
                        <th class="text-center">Mã cổ phiếu</th>
                        <th class="text-center">Ngày giao dịch</th>
                        <th class="text-center">Loại giao dịch</th>
                        <th class="text-center">Số lượng cổ phiếu</th>
                        <th class="text-center">Giá lúc mua bán</th>
                        <th class="text-center">Trung bình giá giao dịch</th>
                        <th class="text-center">Phí môi giới</th>
                        <th class="text-center">Tổng giá trị vốn</th>
                        <th class="text-center">Cổ tức mong đợi</th>
                        <th class="text-center">Ghi chú</th>
                        <th class="text-center">Giá trị tiền vay</th>
                        <th class="text-center">Chi phí lãi vay</th>
                        <th class="text-center">Phải trả hàng tháng</th>
                        <th class="text-center">Phải trả hàng năm</th>
                        <th class="text-center">Số tiền gốc còn phải trả</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (Model.List.Any())
                {
                    if (Model.Type == (int)Constants.ASSET_TYPE.BUSINESS || Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE)
                    {
                        <tr>
                            <td style="color: red;"><strong>Tổng</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome * 12)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalValue)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayPercentageForNumber(Model.TotalMonthlyIncome / Model.TotalValue * 1200)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalMortgageValue).DefaultIfEmpty(0).Sum())</strong></td>
                            <td style="color: red;"><strong>@*@FormatUtility.DisplayPercentageForNumber(Model.List.Select(x => x.TotalAnnualPayment).DefaultIfEmpty(0).Sum() / Model.List.Select(x => x.TotalMortgageValue).DefaultIfEmpty(0).Sum() * 100)*@</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalMonthlyPayment).DefaultIfEmpty(0).Sum())</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalAnnualPayment).DefaultIfEmpty(0).Sum())</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalRemainingValue).DefaultIfEmpty(0).Sum())</strong></td>

                        </tr>
                        foreach (var item in Model.List)
                        {
                            <tr>
                                <td>@item.Asset.AssetName</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value * 12)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                                <td>@FormatUtility.DisplayPercentageForNumber(item.Income.Value / item.Asset.Value * 1200)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalMortgageValue)</td>
                                <td>@FormatUtility.DisplayPercentageForNumber(item.AverageInterestRate)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalMonthlyPayment)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalAnnualPayment)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalRemainingValue)</td>
                            </tr>
                        }
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.OTHERS)
                    {
                        <tr>
                            <td style="color: red;"><strong>Tổng</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome * 12)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalValue)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayPercentageForNumber(Model.TotalMonthlyIncome / Model.TotalValue * 1200)</strong></td>
                        </tr>
                        foreach (var item in Model.List)
                        {
                            <tr>
                                <td>@item.Asset.AssetName</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value * 12)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                                <td>@FormatUtility.DisplayPercentageForNumber(item.Income.Value / item.Asset.Value * 1200)</td>
                            </tr>
                        }
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                    {
                        <tr>
                            <td style="color: red;"><strong>Tổng</strong></td>
                            <td></td>
                            <td></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome * 12)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalValue)</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayPercentageForNumber(Model.TotalMonthlyIncome / Model.TotalValue * 1200)</strong></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                        foreach (var item in Model.List)
                        {
                            <tr>
                                <td>@item.Asset.AssetName</td>
                                <td>@item.Asset.StartDate.Value.ToString("MM/yyyy")</td>
                                <td>@item.Asset.EndDate.Value.ToString("MM/yyyy")</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value * 12)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                                <td>@FormatUtility.DisplayPercentageForNumber(item.Asset.InterestRate.Value)</td>
                                <td>
                                    @if (item.Asset.ObtainedBy == (int)Constants.INTEREST_OBTAIN_TYPE.ORIGIN)
                        {
                                        @Html.Raw("Lãi nhập gốc")
                                    }
                                    else if (item.Asset.ObtainedBy == (int)Constants.INTEREST_OBTAIN_TYPE.START)
                                    {
                                        @Html.Raw("Rút lãi đầu kỳ")
                                    }
                                    else if (item.Asset.ObtainedBy == (int)Constants.INTEREST_OBTAIN_TYPE.END)
                                    {
                                        @Html.Raw("Rút lãi cuối kỳ")
                                    }
                                </td>
                                <td>@item.Asset.Term</td>
                                <td>@item.Asset.Note</td>
                            </tr>
                        }
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.INSURANCE)
                    {
                        <tr>
                            <td><strong class="text-danger">Tổng</strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalValue)</strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().TotalPaymentPeriod * x.Liability.Value).DefaultIfEmpty(0).Sum())</strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().MonthlyPayment).DefaultIfEmpty(0).Sum())</strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().AnnualPayment).DefaultIfEmpty(0).Sum())</strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().RemainedValue).DefaultIfEmpty(0).Sum())</strong></td>
                            <td><strong class="text-danger"></strong></td>
                        </tr>
                        foreach (var item in Model.List)
                        {
                            <tr>
                                <td>@item.Asset.AssetName</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().TotalPaymentPeriod * item.Liability.Value)</td>
                                <td>@item.Liability.StartDate.Value.ToString("MM/yyyy")</td>
                                <td>@item.Liability.EndDate.Value.ToString("MM/yyyy")</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().TotalPaymentPeriod)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().MonthlyPayment)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().AnnualPayment)</td>
                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().RemainedValue)</td>
                                <td>@item.Asset.Note</td>
                            </tr>
                        }
                    }
                    else if (Model.Type == (int)Constants.ASSET_TYPE.STOCK)
                    {
                        <tr>
                            <td class="text-center"><strong class="text-danger">Tổng</strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Sum(x => x.Asset.StockTransactions.Where(y => !y.DisabledDate.HasValue).Sum(y => y.NumberOfShares)))</strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger"></strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Sum(x => x.Asset.StockTransactions.Where(y => !y.DisabledDate.HasValue).Sum(y => y.BrokerFee)))</strong></td>
                            <td><strong class="text-danger">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Sum(x => x.Asset.StockTransactions.Where(y => !y.DisabledDate.HasValue).Sum(y => y.TransactionType == (int)Constants.TRANSACTION_TYPE.SELL ? 0 - y.Value : y.Value)))</strong></td>
                            <td></td>
                            <td></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalMortgageValue).DefaultIfEmpty(0).Sum())</strong></td>
                            <td></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalMonthlyPayment).DefaultIfEmpty(0).Sum())</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalAnnualPayment).DefaultIfEmpty(0).Sum())</strong></td>
                            <td style="color: red;"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.TotalRemainingValue).DefaultIfEmpty(0).Sum())</strong></td>
                        </tr>
                        foreach (var item in Model.List)
                        {
                            foreach (var transaction in item.Asset.StockTransactions.Where(x => !x.DisabledDate.HasValue))
                            {
                                <tr>
                                    <td>@item.Asset.AssetName</td>
                                    <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                    <td></td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.NumberOfShares)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.SpotPrice)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.AveragePrice)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.BrokerFee)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.Value)</td>
                                    <td>@FormatUtility.DisplayPercentageForNumber(transaction.ExpectedDividend)</td>
                                    <td>@item.Asset.Note</td>
                                    <td>@FormatUtility.DisplayPercentageForNumber(item.TotalMortgageValue)</td>
                                    <td>@FormatUtility.DisplayPercentageForNumber(item.AverageInterestRate)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalMonthlyPayment)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalAnnualPayment)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalRemainingValue)</td>
                                </tr>
                            }
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="14" class="text-center">Không có khởi tạo</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
