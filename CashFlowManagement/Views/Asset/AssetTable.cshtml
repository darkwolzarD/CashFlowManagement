@model CashFlowManagement.ViewModels.AssetListViewModel
@using CashFlowManagement.Utilities
@using CashFlowManagement.EntityModel
@using CashFlowManagement.Constants
@using CashFlowManagement.ViewModels
@using CashFlowManagement.Queries
@{
    ViewBag.Title = "AssetTable";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    string title = string.Empty;
    string type = string.Empty;
    if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
    {
        title = "Chi tiết các tài khoản tiết kiệm";
    }
    else if (Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE)
    {
        title = "Chi tiết các bất động sản";
    }
    else if (Model.Type == (int)Constants.ASSET_TYPE.BUSINESS)
    {
        title = "Chi tiết kinh doanh";
    }
    else if (Model.Type == (int)Constants.ASSET_TYPE.INSURANCE)
    {
        title = "Chi tiết bảo hiểm nhân thọ";
    }
    else if (Model.Type == (int)Constants.ASSET_TYPE.STOCK)
    {
        title = "Chi tiết chứng khoán";
    }
    else if (Model.Type == (int)Constants.ASSET_TYPE.OTHERS)
    {
        title = "Chi tiết các tài sản khác";
    }
    int count = 0;
    int rsCount = 0;
    int childCount = 0;
}


@*<ol class="breadcrumb">
        <li class="active">Tài sản</li>
        <li class="active">@title</li>
    </ol>*@
<div class="clear10"></div>
<div class="background">
    <div class="row">
        <div class="col-md-6">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#create-new-asset-modal">
                <span class="glyphicon glyphicon-plus"></span>
                Khai báo
            </button>
            @if (Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.STOCK)
            {
                <button type="button" class="btn btn-success" data-toggle="modal" data-target="#buy-new-asset-modal">
                    <span class="glyphicon glyphicon-home"></span>
                    Mua
                </button>
            }
            else if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
            {
                <button type="button" class="btn btn-success" data-toggle="modal" data-target="#buy-new-asset-modal">
                    <span class="glyphicon glyphicon-home"></span>
                    Mở sổ tiết kiệm
                </button>
            }

            @if (Model.Type == (int)Constants.ASSET_TYPE.STOCK)
            {
                <button type="button" class="btn btn-warning sell-asset-toggle">
                    <span class="glyphicon glyphicon-usd"></span>
                    Bán cổ phiếu
                </button>
            }
        </div>
        <div class="col-md-6 text-right">
            <button type="button" class="btn btn-default btn-compact-view" data-asset-type="@Model.Type">
                <span class="glyphicon glyphicon-th-large"></span>
            </button>
            <button type="button" class="btn btn-default btn-detail-view" data-asset-type="@Model.Type">
                <span class="glyphicon glyphicon-th"></span>
            </button>
        </div>
    </div>
    <div class="clear10"></div>
    <div class="row">
        <div class="col-md-12 asset-table">
            <table class="table table-bordered table-condensed table-responsive">
                <thead>
                    <tr>
                        @if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                        {
                            <th>Tài khoản tiết kiệm</th>
                            <th class="text-right">Ngày gửi</th>
                            <th class="text-right">Ngày đáo hạn</th>
                            <th class="text-right">Thu nhập tháng</th>
                            <th class="text-right">Thu nhập năm</th>
                            <th class="text-right">Tổng vốn</th>
                            <th class="text-right">Lãi suất tiền gửi</th>
                            <th>Kiểu nhận lãi</th>
                            <th class="text-right">Kỳ hạn</th>
                            <th>Ghi chú</th>
                            <th class="text-center">Chỉnh sửa</th>
                        }
                        else if (Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE)
                        {
                            <th>Bất động sản</th>
                            <th class="text-right" colspan="2">Thu nhập hàng tháng</th>
                            <th class="text-right" colspan="2">Thu nhập hàng năm</th>
                            <th class="text-right" colspan="2">Trị giá tài sản</th>
                            <th class="text-right" colspan="2">Tỷ suất lợi nhuận</th>
                            <th class="text-center" colspan="4">Chỉnh sửa</th>
                            <th class="text-center"><strong>Hôm nay: @(DateTime.Now.ToString("MM/yyyy"))</strong></th>
                        }
                        else if (Model.Type == (int)Constants.ASSET_TYPE.BUSINESS)
                        {
                            <th>Kinh doanh</th>
                            <th class="text-right" colspan="2">Thu hàng tháng</th>
                            <th class="text-right" colspan="2">Thu hàng năm</th>
                            <th class="text-right" colspan="2">Giá trị góp vốn</th>
                            <th class="text-right" colspan="2">Tỷ suất lợi nhuận</th>
                            <th class="text-center" colspan="4">Chỉnh sửa</th>
                            <th class="text-center"><strong>Hôm nay: @(DateTime.Now.ToString("MM/yyyy"))</strong></th>
                        }
                        else if (Model.Type == (int)Constants.ASSET_TYPE.INSURANCE)
                        {
                            <th class="text-center">Bảo hiểm nhân thọ</th>
                            <th class="text-center">Tổng giá trị thụ hưởng</th>
                            <th class="text-center">Tổng phải đóng</th>
                            <th class="text-center">Từ ngày</th>
                            <th class="text-center">Đến ngày</th>
                            <th class="text-center">Tổng số tháng</th>
                            <th class="text-center">Phải đóng hàng tháng</th>
                            <th class="text-center">Phải đóng hàng năm</th>
                            <th class="text-center">Còn phải đóng</th>
                            <th class="text-center">Ghi chú</th>
                            <th class="text-center">Chỉnh sửa</th>
                        }
                        else if (Model.Type == (int)Constants.ASSET_TYPE.STOCK)
                        {
                            <th class="text-center">Mã cổ phiếu</th>
                            <th class="text-center">Ngày giao dịch</th>
                            <th class="text-center">Loại giao dịch</th>
                            <th class="text-center">Số lượng cổ phiếu</th>
                            <th class="text-center">Giá lúc mua bán</th>
                            <th class="text-center">Trung bình giá giao dịch</th>
                            <th class="text-center">Phí môi giới</th>
                            <th class="text-center">Tổng giá trị vốn</th>
                            <th class="text-center">Cổ tức mong đợi</th>
                            <th class="text-center">Ghi chú</th>
                            <th class="text-center" colspan="5">Chỉnh sửa</th>
                            <th class="text-center"><strong>Hôm nay: @(DateTime.Now.ToString("MM/yyyy"))</strong></th>
                        }
                        else if (Model.Type == (int)Constants.ASSET_TYPE.OTHERS)
                        {
                            <th class="text-center">Tài sản khác</th>
                            <th class="text-center">Thu nhập hàng tháng</th>
                            <th class="text-center">Thu nhập hàng năm</th>
                            <th class="text-center">Tổng giá trị</th>
                            <th class="text-center">Tỷ suất sinh lời</th>
                            <th class="text-center">Chỉnh sửa</th>
                        }
                    </tr>
                </thead>
                <tbody>

                    @if (Model.List.Any())
            {
                if (Model.Type == (int)Constants.ASSET_TYPE.INSURANCE)
                {
                            <tr>
                                <td><strong style="color: red;">Tổng</strong></td>
                                <td><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalValue)</strong></td>
                                <td><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().TotalPaymentPeriod * x.Liability.Value).DefaultIfEmpty(0).Sum())</strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().MonthlyPayment).DefaultIfEmpty(0).Sum())</strong></td>
                                <td><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().AnnualPayment).DefaultIfEmpty(0).Sum())</strong></td>
                                <td><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Select(x => x.LiabilityList.List.FirstOrDefault().RemainedValue).DefaultIfEmpty(0).Sum())</strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td></td>
                            </tr>
                            foreach (var item in Model.List)
                            {
                                <tr>
                                    <td>@item.Asset.AssetName</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().TotalPaymentPeriod * item.Liability.Value)</td>
                                    <td>@item.Liability.StartDate.Value.ToString("MM/yyyy")</td>
                                    <td>@item.Liability.EndDate.Value.ToString("MM/yyyy")</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().TotalPaymentPeriod)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().MonthlyPayment)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().AnnualPayment)</td>
                                    <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.LiabilityList.List.FirstOrDefault().RemainedValue)</td>
                                    <td>@item.Asset.Note</td>
                                    <td class="text-center" width="160px">
                                        <button class="btn btn-success update-asset" data-asset-id="@item.Asset.Id">
                                            <span class="glyphicon glyphicon-pencil"></span>
                                            Cập nhật
                                        </button>
                                        <button class="btn btn-danger delete-asset" data-asset-id="@item.Asset.Id">
                                            <span class="glyphicon glyphicon-remove"></span>
                                            Xóa
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else if (Model.Type == (int)Constants.ASSET_TYPE.STOCK)
                        {
                            <tr>
                                <td class="text-center"><strong style="color: red;">Tổng</strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;"></strong></td>
                                <td><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Sum(x => x.Asset.StockTransactions.Where(y => !y.DisabledDate.HasValue).Sum(y => y.BrokerFee)))</strong></td>
                                <td colspan="3"><strong style="color: red;">@FormatUtility.DisplayThousandSeparatorsForNumber(Model.List.Sum(x => x.Asset.StockTransactions.Where(y => !y.DisabledDate.HasValue).Sum(y => y.TransactionType == (int)Constants.TRANSACTION_TYPE.SELL ? 0 - y.Value : y.Value)))</strong></td>
                                <td colspan="6"></td>
                            </tr>
                            foreach (var item in Model.List)
                            {
                                <tr class="rs-@rsCount">
                                    <td class="text-center" rowspan="@(item.LiabilityList.List.Count() / 2 + item.Asset.StockTransactions.Count() + item.Asset.StockTransactions.Where(x => x.Liabilities.Count > 0).Count() + 1)" width="120">@item.Asset.AssetName</td>
                                </tr>
                                foreach (var transaction in item.Asset.StockTransactions.Where(x => !x.DisabledDate.HasValue))
                                {
                                    @*<tr>
                                            <th class="text-center">Ngày giao dịch</th>
                                            <th class="text-center">Loại giao dịch</th>
                                            <th class="text-center">Số lượng cổ phiếu</th>
                                            <th class="text-center">Giá lúc mua bán</th>
                                            <th class="text-center">Trung bình giá giao dịch</th>
                                            <th class="text-center">Phí môi giới</th>
                                            <th class="text-center">Tổng giá trị vốn</th>
                                            <th class="text-center">Cổ tức mong đợi</th>
                                            <th class="text-center">Ghi chú</th>
                                            <th class="text-center" colspan="5">Chỉnh sửa</th>
                                            <th class="text-center"><strong></strong></th>
                                        </tr>*@
                                    <tr>
                                        <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                        <td style="color: red;">
                                            @if (transaction.TransactionType == (int)Constants.TRANSACTION_TYPE.CREATE)
                                            {
                                                @Html.Raw("Khai báo")
                                            }
                                            else if (transaction.TransactionType == (int)Constants.TRANSACTION_TYPE.BUY)
                                            {
                                                @Html.Raw("Mua")
                                            }
                                            else if (transaction.TransactionType == (int)Constants.TRANSACTION_TYPE.SELL)
                                            {
                                                @Html.Raw("Bán")
                                            }
                                        </td>
                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.NumberOfShares)</td>
                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.SpotPrice)</td>
                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.AveragePrice)</td>
                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.BrokerFee)</td>
                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(transaction.Value)</td>
                                        <td>@FormatUtility.DisplayPercentageForNumber(transaction.ExpectedDividend)</td>
                                        <td>@transaction.Note</td>
                                        <td class="text-center" colspan="6">
                                            <button class="btn btn-success update-asset" data-asset-id="@item.Asset.Id" data-transaction-id="@transaction.Id">
                                                <span class="glyphicon glyphicon-pencil"></span>
                                                Cập nhật
                                            </button>
                                            <button class="btn btn-danger delete-asset" data-asset-id="@item.Asset.Id" data-transaction-id="@transaction.Id">
                                                <span class="glyphicon glyphicon-remove"></span>
                                                Xóa
                                            </button>
                                            <button type="button" class="btn btn-primary create-new-liability" data-asset-id="@item.Asset.Id" data-transaction-id="@transaction.Id" data-asset-type="@Model.Type">
                                                <span class="glyphicon glyphicon-plus"></span>
                                                Vay
                                            </button>
                                        </td>
                                    </tr>

                                    if (item.LiabilityList.List.Where(x => !x.Liability.ParentLiabilityId.HasValue && x.Liability.TransactionId == transaction.Id).Any())
                                    {
                                        <tr>
                                            <td></td>
                                            <th class="text-center">Nguồn vay nợ</th>
                                            <th class="text-center">Giá trị nợ</th>
                                            <th class="text-center">Loại lãi suất</th>
                                            <th class="text-center">Lãi vay</th>
                                            <th class="text-center">Ngày bắt đầu vay</th>
                                            <th class="text-center">Ngày trả hết nợ</th>
                                            <th class="text-center">Tổng số tháng phải trả</th>
                                            <th class="text-center">Trả gốc hàng tháng</th>
                                            <th class="text-center">Trả lãi hàng tháng</th>
                                            <th class="text-center">Tổng phải trả hàng tháng</th>
                                            <th class="text-center">Tổng phải trả hàng năm</th>
                                            <th class="text-center">Nợ gốc còn phải trả</th>
                                            <th class="text-center" style="vertical-align: middle" colspan="2"></th>
                                        </tr>

                                        foreach (var liabilityViewModel in item.LiabilityList.List.Where(x => !x.Liability.ParentLiabilityId.HasValue && x.Liability.TransactionId == transaction.Id))
                                        {
                                            <tr class="child-@childCount">
                                                <td></td>
                                                <td><a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@liabilityViewModel.Liability.Name</a></td>
                                                <td>
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.Liability.Value)</a>
                                                </td>
                                                <td>
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">
                                                        @if (liabilityViewModel.Liability.InterestType == 1)
                                                        {
                                                            @Html.Raw("Cố định")
                                                        }
                                                        else if (liabilityViewModel.Liability.InterestType == 2)
                                                        {
                                                            @Html.Raw("Giảm dần")
                                                        }
                                                    </a>
                                                </td>
                                                <td>
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-rate">@FormatUtility.DisplayPercentageForNumber(liabilityViewModel.CurrentInterestRate)</a>
                                                </td>
                                                <td>
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@liabilityViewModel.Liability.StartDate.Value.ToString("MM/yyyy")</a>
                                                </td>
                                                <td>
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@liabilityViewModel.Liability.EndDate.Value.ToString("MM/yyyy")</a>
                                                </td>
                                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.TotalPaymentPeriod)</td>
                                                <td>
                                                    @FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyOriginalPayment)
                                                </td>
                                                <td><a href="#" class="interest-info" data-liability-id="@liabilityViewModel.Liability.Id">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyInterestPayment)</a></td>
                                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyPayment)</td>
                                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.AnnualPayment)</td>
                                                <td>@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.RemainedValue)</td>
                                                <td class="text-center" width="200px" style="vertical-align: middle" colspan="2">
                                                    @*<button class="btn btn-success update-loan" data-loan-id="@loanViewModel.Loan.Id">
                                                            <span class="glyphicon glyphicon-pencil"></span>
                                                        </button>*@
                                                    <button class="btn btn-danger delete-liability" data-liability-id="@liabilityViewModel.Liability.Id">
                                                        <span class="glyphicon glyphicon-remove"></span>
                                                        Xóa
                                                    </button>
                                                    <button class="btn btn-warning" href=".detail-@count" data-toggle="collapse">
                                                        <span class="glyphicon glyphicon-zoom-in"></span>
                                                        Chi tiết
                                                    </button>
                                                </td>
                                            </tr>
                                            foreach (var childLiabilityViewModel in item.LiabilityList.List.Where(x => x.Liability.ParentLiabilityId == liabilityViewModel.Liability.Id && x.Liability.TransactionId == transaction.Id).OrderBy(x => x.Liability.StartDate.Value))
                                            {
                                                if (childLiabilityViewModel.MonthlyOriginalPayment > 0)
                                                {
                                                    <tr class="detail-@count rs-@rsCount child-@childCount collapse success">
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td>@FormatUtility.DisplayPercentageForNumber(childLiabilityViewModel.CurrentInterestRate)</td>
                                                        <td>@childLiabilityViewModel.Liability.StartDate.Value.ToString("MM/yyyy")</td>
                                                        <td>@childLiabilityViewModel.Liability.EndDate.Value.ToString("MM/yyyy")</td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.TotalPaymentPeriod)</td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyOriginalPayment)</td>
                                                        <td><a href="#" class="interest-info" data-liability-id="@childLiabilityViewModel.Liability.Id">@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.MonthlyInterestPayment)</a></td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.MonthlyPayment)</td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.AnnualPayment)</td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.RemainedValue)</td>
                                                        <td class="text-center" width="100" style="vertical-align: middle;"></td>
                                                        <td></td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr class="detail-@count rs-@rsCount child-@childCount collapse">
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td>@FormatUtility.DisplayPercentageForNumber(childLiabilityViewModel.CurrentInterestRate)</td>
                                                        <td>@childLiabilityViewModel.Liability.StartDate.Value.ToString("MM/yyyy")</td>
                                                        <td>@childLiabilityViewModel.Liability.EndDate.Value.ToString("MM/yyyy")</td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.TotalPaymentPeriod)</td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                    </tr>
                                                }
                                                {
                                                    childCount++;
                                                }
                                            }
                                            {
                                                count++;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            <tr>
                                <td><strong>Tổng</strong></td>
                                @if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                                {
                                    <td></td>
                                    <td></td>
                                }
                                <td class="text-right" style="color: red;" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome)</strong></td>
                                <td class="text-right" style="color: red;" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalMonthlyIncome * 12)</strong></td>
                                <td class="text-right" style="color: red;" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(Model.TotalValue)</strong></td>
                                <td class="text-right" style="color: red;" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)"><strong>@FormatUtility.DisplayPercentageForNumber(Model.TotalMonthlyIncome / Model.TotalValue * 1200)</strong></td>
                                <td class="text-right" style="color: red;" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 4 : 1)"></td>
                                @if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                                {
                                    <td></td>
                                    <td></td>
                                }
                                else if (Model.Type != (int)Constants.ASSET_TYPE.OTHERS)
                                {
                                    <td></td>
                                }
                            </tr>


                            foreach (var item in Model.List)
                            {
                                if (Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE)
                                {
                                    <tr>
                                        <th>Bất động sản</th>
                                        <th class="text-right" colspan="2">Thu nhập hàng tháng</th>
                                        <th class="text-right" colspan="2">Thu nhập hàng năm</th>
                                        <th class="text-right" colspan="2">Trị giá tài sản</th>
                                        <th class="text-right" colspan="2">Tỷ suất lợi nhuận</th>
                                        <th colspan="4"></th>
                                        <th></th>
                                    </tr>
                                }
                                else if (Model.Type == (int)Constants.ASSET_TYPE.BUSINESS)
                                {
                                    <tr>
                                        <th>Kinh doanh</th>
                                        <th class="text-right" colspan="2">Thu hàng tháng</th>
                                        <th class="text-right" colspan="2">Thu hàng năm</th>
                                        <th class="text-right" colspan="2">Giá trị góp vốn</th>
                                        <th class="text-right" colspan="2">Tỷ suất lợi nhuận</th>
                                        <th colspan="4"></th>
                                        <th></th>
                                    </tr>

                                }
                                <tr class="rs-@rsCount">
                                    <td class="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? "text-left" : string.Empty)" style="vertical-align: middle" rowspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? item.LiabilityList != null && item.LiabilityList.List.Where(x => !x.Liability.ParentLiabilityId.HasValue).Count() > 0 ? item.LiabilityList.List.Where(x => !x.Liability.ParentLiabilityId.HasValue).Count() + 2 : 1 : 1)" width="120">
                                        @item.Asset.AssetName
                                        @if (item.Asset.ObtainedBy.HasValue)
                                        {
                                            if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.REAL_ESTATE)
                                            {
                                                if (item.Asset.ObtainedBy == (int)Constants.OBTAIN_BY.CREATE)
                                                {
                                                    <p style="color: red;">Tài sản khai báo</p>
                                                }
                                                else if (item.Asset.ObtainedBy == (int)Constants.OBTAIN_BY.BUY)
                                                {
                                                    <p style="color: red;">Tài sản mua</p>
                                                }
                                            }
                                        }
                                    </td>
                                    @if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                                    {
                                        <td class="text-right">@item.Asset.StartDate.Value.ToString("dd/MM/yyyy")</td>
                                        <td class="text-right">@item.Asset.EndDate.Value.ToString("dd/MM/yyyy")</td>
                                    }
                                    <td class="text-right" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)">@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value)</td>
                                    <td class="text-right" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)">@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value * 12)</td>
                                    <td class="text-right" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)">@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                                    <td class="text-right" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 2 : 1)">@FormatUtility.DisplayPercentageForNumber(item.Income.Value / item.Asset.Value * 1200)</td>
                                    @if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                                    {
                                        <td>
                                            @if (item.Asset.ObtainedBy == (int)Constants.INTEREST_OBTAIN_TYPE.ORIGIN)
                                            {
                                                @Html.Raw("Lãi nhập gốc")
                                            }
                                            else if (item.Asset.ObtainedBy == (int)Constants.INTEREST_OBTAIN_TYPE.START)
                                            {
                                                @Html.Raw("Rút lãi đầu kỳ")
                                            }
                                            else if (item.Asset.ObtainedBy == (int)Constants.INTEREST_OBTAIN_TYPE.END)
                                            {
                                                @Html.Raw("Rút lãi cuối kỳ")
                                            }
                                        </td>
                                        <td class="text-right">@item.Asset.Term</td>
                                        <td>@item.Asset.Note</td>
                                    }
                                    <td class="text-center" colspan="@(Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.BUSINESS ? 4 : 1)" width="300px">
                                        @if (!item.Asset.ObtainedBy.HasValue || (item.Asset.AssetType == (int)Constants.ASSET_TYPE.REAL_ESTATE &&
item.Asset.ObtainedBy.HasValue && item.Asset.ObtainedBy.Value == (int)Constants.OBTAIN_BY.CREATE) || item.Asset.AssetType == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                                        {
                                            <button class="btn btn-success update-asset" data-asset-id="@item.Asset.Id">
                                                <span class="glyphicon glyphicon-pencil"></span>
                                                Cập nhật
                                            </button>
                                            <button class="btn btn-danger delete-asset" data-asset-id="@item.Asset.Id">
                                                <span class="glyphicon glyphicon-remove"></span>
                                                Xóa
                                            </button>
                                        }
                                        @if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.REAL_ESTATE || item.Asset.AssetType == (int)Constants.ASSET_TYPE.BUSINESS)
                                        {
                                            <button type="button" class="btn btn-primary create-new-liability" data-asset-id="@item.Asset.Id" data-asset-type="@Model.Type">
                                                <span class="glyphicon glyphicon-plus"></span>
                                                Vay
                                            </button>
                                            <button class="btn btn-warning sell-asset-toggle" data-asset-id="@item.Asset.Id">
                                                <span class="glyphicon glyphicon-usd"></span>
                                                Bán
                                            </button>
                                        }
                                        @if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                                        {
                                            <button class="btn btn-warning sell-asset-toggle" data-asset-id="@item.Asset.Id">
                                                <span class="glyphicon glyphicon-usd"></span>
                                                Rút tiền
                                            </button>

                                        }
                                    </td>
                                    @if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.REAL_ESTATE || item.Asset.AssetType == (int)Constants.ASSET_TYPE.BUSINESS)
                                    {
                                        <td></td>
                                    }
                                </tr>
                                if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.REAL_ESTATE || item.Asset.AssetType == (int)Constants.ASSET_TYPE.BUSINESS)
                                {
                                    if (item.LiabilityList != null && item.LiabilityList.List.Count > 0)
                                    {
                                        <tr>
                                            <th>Nguồn vay nợ</th>
                                            <th class="text-right">Giá trị nợ</th>
                                            <th>Loại lãi suất</th>
                                            <th class="text-right">Lãi vay</th>
                                            <th class="text-right">Ngày vay</th>
                                            <th class="text-right">Ngày trả hết</th>
                                            <th class="text-right">Số tháng phải trả</th>
                                            <th class="text-right">Trả gốc tháng</th>
                                            <th class="text-right">Trả lãi tháng</th>
                                            <th class="text-right">Tổng phải trả tháng</th>
                                            <th class="text-right">Tổng phải trả năm</th>
                                            <th class="text-right">Nợ còn phải trả</th>
                                            <th></th>
                                        </tr>
                                        foreach (var liabilityViewModel in item.LiabilityList.List.Where(x => !x.Liability.ParentLiabilityId.HasValue))
                                        {
                                            <tr class="rs-@rsCount child-@childCount">
                                                <td><a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@liabilityViewModel.Liability.Name</a></td>
                                                <td class="text-right">
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.Liability.Value)</a>
                                                </td>
                                                <td>
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">
                                                        @if (liabilityViewModel.Liability.InterestType == 1)
                                                        {
                                                            @Html.Raw("Cố định")
                                                        }
                                                        else if (liabilityViewModel.Liability.InterestType == 2)
                                                        {
                                                            @Html.Raw("Giảm dần")
                                                        }
                                                    </a>
                                                </td>
                                                <td class="text-right">
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-rate">@FormatUtility.DisplayPercentageForNumber(liabilityViewModel.CurrentInterestRate)</a>
                                                </td>
                                                <td class="text-right">
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@liabilityViewModel.Liability.StartDate.Value.ToString("MM/yyyy")</a>
                                                </td>
                                                <td class="text-right">
                                                    <a class="update-liability" href="#" data-liability-id="@liabilityViewModel.Liability.Id" data-trigger="edit-no-rate">@liabilityViewModel.Liability.EndDate.Value.ToString("MM/yyyy")</a>
                                                </td>
                                                <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.TotalPaymentPeriod)</td>
                                                <td class="text-right">
                                                    @FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyOriginalPayment)
                                                </td>
                                                <td class="text-right"><a href="#" class="interest-info" data-liability-id="@liabilityViewModel.Liability.Id">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyInterestPayment)</a></td>
                                                <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyPayment)</td>
                                                <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.AnnualPayment)</td>
                                                <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.RemainedValue)</td>
                                                <td class="text-center" width="150" style="vertical-align: middle">
                                                    @*<button class="btn btn-success update-loan" data-loan-id="@loanViewModel.Loan.Id">
                                                            <span class="glyphicon glyphicon-pencil"></span>
                                                        </button>*@
                                                    <button class="btn btn-danger delete-liability" data-liability-id="@liabilityViewModel.Liability.Id">
                                                        <span class="glyphicon glyphicon-remove"></span>
                                                        Xóa
                                                    </button>
                                                    <button class="btn btn-warning" href=".detail-@count" data-toggle="collapse">
                                                        <span class="glyphicon glyphicon-zoom-in"></span>
                                                        Chi tiết
                                                    </button>
                                                </td>
                                            </tr>
                                            foreach (var childLiabilityViewModel in item.LiabilityList.List.Where(x => x.Liability.ParentLiabilityId == liabilityViewModel.Liability.Id).OrderBy(x => x.Liability.StartDate.Value))
                                            {
                                                if (childLiabilityViewModel.MonthlyOriginalPayment > 0)
                                                {
                                                    <tr class="detail-@count rs-@rsCount child-@childCount collapse success">
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td class="text-right">@FormatUtility.DisplayPercentageForNumber(childLiabilityViewModel.CurrentInterestRate)</td>
                                                        <td class="text-right">@childLiabilityViewModel.Liability.StartDate.Value.ToString("MM/yyyy")</td>
                                                        <td class="text-right">@childLiabilityViewModel.Liability.EndDate.Value.ToString("MM/yyyy")</td>
                                                        <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.TotalPaymentPeriod)</td>
                                                        <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(liabilityViewModel.MonthlyOriginalPayment)</td>
                                                        <td class="text-right"><a href="#" class="interest-info" data-liability-id="@childLiabilityViewModel.Liability.Id">@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.MonthlyInterestPayment)</a></td>
                                                        <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.MonthlyPayment)</td>
                                                        <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.AnnualPayment)</td>
                                                        <td class="text-right">@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.RemainedValue)</td>
                                                        <td></td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr class="detail-@count rs-@rsCount child-@childCount collapse">
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td>@FormatUtility.DisplayPercentageForNumber(childLiabilityViewModel.CurrentInterestRate)</td>
                                                        <td>@childLiabilityViewModel.Liability.StartDate.Value.ToString("MM/yyyy")</td>
                                                        <td>@childLiabilityViewModel.Liability.EndDate.Value.ToString("MM/yyyy")</td>
                                                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(childLiabilityViewModel.TotalPaymentPeriod)</td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                        <td></td>
                                                    </tr>
                                                }
                                                {
                                                    childCount++;
                                                }
                                            }
                                            {
                                                count++;
                                            }
                                        }
                                        <tr>
                                            <td><strong>Tổng</strong></td>
                                            <td></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalMortgageValue)</strong></td>
                                            <td></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayPercentageForNumber(item.AverageInterestRate)</strong></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalOriginalPayment)</strong></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalInterestPayment)</strong></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalMonthlyPayment)</strong></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalAnnualPayment)</strong></td>
                                            <td class="text-right"><strong>@FormatUtility.DisplayThousandSeparatorsForNumber(item.TotalRemainingValue)</strong></td>
                                            <td></td>
                                        </tr>
                                    }
                                    {
                                        rsCount++;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="20" class="text-center">Không có dữ liệu</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="asset-modal">
    @{ Html.RenderPartial("_AssetModal", new AssetViewModel
        {
            Asset = new Assets { AssetType = Model.Type },
            Income = new Incomes()
        }); }
</div>

<div class="update-modal">

</div>

<div class="liability-modal">

</div>

<div class="update-liability-modal-div">

</div>

<div class="interest-modal-div">

</div>

<div class="sell-asset-modal">

</div>

@if (Model.Type == (int)Constants.ASSET_TYPE.REAL_ESTATE || Model.Type == (int)Constants.ASSET_TYPE.STOCK
                                        || Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
{
    <div class="buy-asset-modal">
        @{ Html.RenderPartial("_BuyAssetModal", new AssetViewModel
            {
                Asset = new Assets { AssetType = Model.Type },
                Income = new Incomes(),
                CurrentAvailableMoney = AssetQueries.CheckAvailableMoney(UserQueries.GetCurrentUsername(), DateTime.Now)
            }); }
    </div>
            }

<script type="text/javascript" src="~/Scripts/asset.js"></script>
<script type="text/javascript">
    var Url = new Object();
    Url.CreateAsset = '@Url.Action("CreateAsset", "Asset")';
    Url.LoadTable = '@Url.Action("AssetTable", "Asset")';
    Url.LoadCompactTable = '@Url.Action("Report", "Asset")';
    Url.LoadAsset = '@Url.Action("_AssetUpdateModal", "Asset")';
    Url.UpdateAsset = '@Url.Action("UpdateAsset", "Asset")';
    Url.BuyAsset = '@Url.Action("BuyAsset", "Asset")';
    Url.SellAsset = '@Url.Action("SellAsset", "Asset")';
    Url.SellAssetModal = '@Url.Action("_SellAssetModal", "Asset")';
    Url.CheckRemainedStock = '@Url.Action("CheckRemainedStock", "Asset")';
    Url.DeleteAsset = '@Url.Action("DeleteAsset", "Asset")';
    Url.CheckAvailableMoney = '@Url.Action("CheckAvailableMoney", "Asset")';
    Url.LiabilityModal = '@Url.Action("_LiabilityModal", "Liability")';
    Url.CreateLiability = '@Url.Action("CreateLiability", "Liability")';
    Url.LoadLiability = '@Url.Action("_LiabilityUpdateModal", "Liability")';
    Url.UpdateLiability = '@Url.Action("UpdateLiability", "Liability")';
    Url.DeleteLiability = '@Url.Action("DeleteLiability", "Liability")';
    Url.PaymentPerMonth = '@Url.Action("_PaymentPerMonth", "Liability")';
    var assetType = @Model.Type;
</script>

