@model CashFlowManagement.ViewModels.AssetListViewModel
@using CashFlowManagement.Utilities
@using CashFlowManagement.EntityModel
@using CashFlowManagement.Constants
@using CashFlowManagement.ViewModels
@{
    ViewBag.Title = "AssetTable";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    string title = string.Empty;
    string type = string.Empty;
    if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
    {
        title = "BANK DEPOSIT";
    }
}

<div class="background">
    <h3 class="text-center">@title</h3>
    @if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
    {
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#create-new-asset-modal">
            Add bank deposit income
        </button>
    }
    <div class="asset-table">
        <table class="table table-bordered table-condensed table-responsive">
            <thead>
                <tr>
                    @if (Model.Type == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                    {
                        <th>Bank deposit income</th>
                        <th>Monthly income</th>
                        <th>Annual income</th>
                        <th>Capital value</th>
                        <th>Interest Yield</th>
                        <th>Participant bank</th>
                        <th>Note</th>
                    }
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.List)
                {
                    <tr>
                        <td>@item.Asset.AssetName</td>
                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value)</td>
                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value * 12)</td>
                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Asset.Value)</td>
                        <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Income.Value / item.Asset.Value)</td>
                        @if (item.Asset.AssetType == (int)Constants.ASSET_TYPE.BANK_DEPOSIT)
                        {
                            <td>@item.Asset.ParticipantBank</td>
                            <td>@item.Asset.Note</td>
                        }
                        <td class="text-center">
                            <button class="btn btn-success update-asset" data-asset-id="@item.Asset.Id">
                                <span class="glyphicon glyphicon-pencil"></span>
                            </button>
                            <button class="btn btn-danger delete-asset" data-asset-id="@item.Asset.Id">
                                <span class="glyphicon glyphicon-remove"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="asset-modal">
    @{ Html.RenderPartial("_AssetModal", new AssetViewModel { Asset = new Assets { AssetType = (int)Constants.ASSET_TYPE.BANK_DEPOSIT },
            Income = new Incomes()}); }
</div>

<div class="update-modal">
    
</div>

@*<div class="loan-modal">
    @{ Html.RenderPartial("LoanModal");  }
</div>

<div class="update-loan-modal-div">
    @{ Html.RenderPartial("UpdateLoanModal");  }
</div>*@

<div class="interest-modal-div">

</div>


<script type="text/javascript" src="~/Scripts/asset.js"></script>
<script type="text/javascript">
    var Url = new Object();
    Url.CreateAsset = '@Url.Action("CreateAsset", "Asset")';
    Url.LoadTable = '@Url.Action("AssetTable", "Asset")';
    Url.LoadAsset = '@Url.Action("_AssetUpdateModal", "Asset")';
    Url.UpdateAsset = '@Url.Action("UpdateAsset", "Asset")';
    Url.DeleteAsset = '@Url.Action("DeleteAsset", "Asset")';
    Url.LoanModal = '@Url.Action("LoanModal", "Asset")';
    Url.CreateLoan = '@Url.Action("CreateLoan", "Asset")';
    Url.LoadLoan = '@Url.Action("UpdateLoanModal", "Asset")';
    Url.LoadLoanWithRate = '@Url.Action("UpdateLoanWithRateModal", "Asset")';
    Url.UpdateLoan = '@Url.Action("UpdateLoan", "Asset")';
    Url.DeleteLoan = '@Url.Action("DeleteLoan", "Asset")';
    Url.PaymentsPerMonth = '@Url.Action("PaymentsPerMonth", "Asset")';
    var assetType = @((int)Constants.ASSET_TYPE.BANK_DEPOSIT);
</script>

