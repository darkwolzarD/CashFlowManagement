@model CashFlowManagement.ViewModels.ExpenseListViewModel
@using CashFlowManagement.Constants
@using CashFlowManagement.Utilities
@using CashFlowManagement.EntityModel
@{
    ViewBag.Title = "ExpenseTable";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    string title = string.Empty;
    string type = string.Empty;
    if (Model.Type == (int)Constants.EXPENSE_TYPE.FAMILY)
    {
        title = "Chi tiêu gia đình";
    }
    else if (Model.Type == (int)Constants.EXPENSE_TYPE.OTHERS)
    {
        title = "Chi tiêu khác";
    }
}

<div class="background">
    <h3 class="text-center">@title</h3>
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#create-new-expense-modal">
        @if (Model.Type == (int)Constants.EXPENSE_TYPE.FAMILY)
        {
            @Html.Raw("Tạo mới chi tiêu gia đình")
        }
        else if (Model.Type == (int)Constants.EXPENSE_TYPE.OTHERS)
        {
            @Html.Raw("Tạo mới chi tiêu khác")
        }
    </button>
    <div class="expense-table">
        <table class="table table-bordered table-condensed table-responsive">
            <thead>
                <tr>
                    @if (Model.Type == (int)Constants.EXPENSE_TYPE.FAMILY)
                    {
                        <th>Chi tiêu gia đình</th>
                    }
                    else if (Model.Type == (int)Constants.EXPENSE_TYPE.OTHERS)
                    {
                        <th>Chi tiêu khác</th>
                    }
                    <th>Chi tiêu tháng</th>
                    <th>Chi tiêu năm</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Model.List.Any())
                {
                    foreach (var item in Model.List)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Value)</td>
                            <td>@FormatUtility.DisplayThousandSeparatorsForNumber(item.Value * 12)</td>
                            <td>
                                <button class="btn btn-success update-expense" data-expense-id="@item.Id">
                                    <span class="glyphicon glyphicon-pencil"></span>
                                </button>
                                <button class="btn btn-danger delete-expense" data-expense-id="@item.Id">
                                    <span class="glyphicon glyphicon-remove"></span>
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">Không có dữ liệu</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="expense-modal">
    @{ Html.RenderPartial("_ExpenseModal", new Expenses
        {
            ExpenseType = Model.Type
        }); }
</div>

<div class="update-modal">

</div>


<script type="text/javascript" src="~/Scripts/expense.js"></script>
<script type="text/javascript">
    var Url = new Object();
    Url.CreateExpense = '@Url.Action("CreateExpense", "Expense")';
    Url.LoadTable = '@Url.Action("ExpenseTable", "Expense")';
    Url.LoadExpense = '@Url.Action("_ExpenseUpdateModal", "Expense")';
    Url.UpdateExpense = '@Url.Action("UpdateExpense", "Expense")';
    Url.DeleteExpense = '@Url.Action("DeleteExpense", "Expense")';
    var expenseType = @Model.Type;
</script>